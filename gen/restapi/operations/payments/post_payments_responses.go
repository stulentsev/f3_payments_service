// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/nvloff/f3_payments_service/gen/models"
)

// PostPaymentsCreatedCode is the HTTP code returned for type PostPaymentsCreated
const PostPaymentsCreatedCode int = 201

/*PostPaymentsCreated Payment creation response

swagger:response postPaymentsCreated
*/
type PostPaymentsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.PaymentCreationResponse `json:"body,omitempty"`
}

// NewPostPaymentsCreated creates PostPaymentsCreated with default headers values
func NewPostPaymentsCreated() *PostPaymentsCreated {

	return &PostPaymentsCreated{}
}

// WithPayload adds the payload to the post payments created response
func (o *PostPaymentsCreated) WithPayload(payload *models.PaymentCreationResponse) *PostPaymentsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post payments created response
func (o *PostPaymentsCreated) SetPayload(payload *models.PaymentCreationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPaymentsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPaymentsBadRequestCode is the HTTP code returned for type PostPaymentsBadRequest
const PostPaymentsBadRequestCode int = 400

/*PostPaymentsBadRequest Payment creation error

swagger:response postPaymentsBadRequest
*/
type PostPaymentsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewPostPaymentsBadRequest creates PostPaymentsBadRequest with default headers values
func NewPostPaymentsBadRequest() *PostPaymentsBadRequest {

	return &PostPaymentsBadRequest{}
}

// WithPayload adds the payload to the post payments bad request response
func (o *PostPaymentsBadRequest) WithPayload(payload *models.APIError) *PostPaymentsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post payments bad request response
func (o *PostPaymentsBadRequest) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPaymentsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostPaymentsDefault Unexpected error

swagger:response postPaymentsDefault
*/
type PostPaymentsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewPostPaymentsDefault creates PostPaymentsDefault with default headers values
func NewPostPaymentsDefault(code int) *PostPaymentsDefault {
	if code <= 0 {
		code = 500
	}

	return &PostPaymentsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post payments default response
func (o *PostPaymentsDefault) WithStatusCode(code int) *PostPaymentsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post payments default response
func (o *PostPaymentsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post payments default response
func (o *PostPaymentsDefault) WithPayload(payload *models.APIError) *PostPaymentsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post payments default response
func (o *PostPaymentsDefault) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPaymentsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
